# define defaults
action "default" "stacks::set_default_network" {
  network_id = env.stacks_network_id
  rpc_api_url = env.stacks_api_url
}

# define wallets
wallet "operator" "stacks::mnemonic" {
  mnemonic = env.bns_operator_mnemonic
}

# define inputs
input "namespace" {
  description = "TLD / Namespace"
  value = "btc"
}

input "salt" {
  description = "Random salt to use for preventing front-running"
  value = "00000000000000"
}

input "namespace_price" {
  description = "Stx to burn when preordering the namespace"
  value = 64000000000
}

# perform on-chain interactions
action "send_namespace_preorder" "stacks::send_contract_call" {
  description = "Send Namespace Preorder transaction for ${input.namespace}"
  contract_id = env.bns_v2_id
  function_name = "namespace-preorder"
  function_args = [
      stacks::cv_buff(
        ripemd160(sha256(
          [
            encode_hex(input.namespace),
            encode_hex(input.salt)
          ]
        ))
      ),
      stacks::cv_uint(input.namespace_price), 
  ]
  signer = wallet.operator
  confirmations = 1
}

action "send_namespace_reveal" "stacks::send_contract_call" {
  description = "Send Namespace Reveal transaction for ${input.namespace}"
  contract_id = env.bns_v2_id
  function_name = "namespace-reveal"
  function_args = [
      stacks::cv_buff(encode_hex(input.namespace)),
      stacks::cv_buff(encode_hex(input.salt)),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(1),
      stacks::cv_uint(0),
      stacks::cv_uint(0),
      stacks::cv_uint(10000),
      stacks::cv_principal(env.bns_manager_address),
      // stacks::cv_some(stacks::cv_principal(env.bns_manager_address)), // for a managed namespace
      stacks::cv_none(), // unmanaged namespace
      stacks::cv_bool(true),
      stacks::cv_bool(true),
      stacks::cv_bool(true)
  ]
  signer = wallet.operator
  confirmations = 1
  depends_on = [action.send_namespace_preorder.tx_id]
}

action "send_namespace_launch" "stacks::send_contract_call" {
  description = "Send Namespace Launch transaction for ${input.namespace}"
  contract_id = env.bns_v2_id
  function_name = "namespace-launch"
  function_args = [
      stacks::cv_buff(encode_hex(input.namespace))
  ]
  signer = wallet.operator
  confirmations = 1
  depends_on = [action.send_namespace_reveal.tx_id]
}

# display outputs
output "bns_namespace" {
  value = "Registered namespace ${input.namespace}"
}

output "namespace_preorder_tx_link" {
  value = "https://explorer.hiro.so/txid/${action.send_namespace_preorder.tx_id}?chain=${env.stacks_network_id}&api=${env.stacks_api_url}"
}

output "namespace_reveal_tx_link" {
  value = "https://explorer.hiro.so/txid/${action.send_namespace_reveal.tx_id}?chain=${env.stacks_network_id}&api=${env.stacks_api_url}"
}

output "namespace_launch_tx_link" {
  value = "https://explorer.hiro.so/txid/${action.send_namespace_launch.tx_id}?chain=${env.stacks_network_id}&api=${env.stacks_api_url}"
}
